object MyState : State<Any> {
  val value: Any
    get() {
      return ""
    }
}
object MyStateState : StateObject {
  val firstStateRecord: StateRecord
    get() {
      return TODO()
    }
  override fun prependStateRecord(value: StateRecord): Nothing {
    return TODO()
  }
}
@Composable
fun MyComposable() {
  var a by {
    val a$delegate = ComposeInvestigator.registerStateObject(mutableStateOf(
      value = 1
    ), "a")
    get() {
      return a$delegate.getValue(null, ::a$delegate)
    }
    set(<set-?>: Int) {
      return a$delegate.setValue(null, ::a$delegate, <set-?>)
    }
  }
  var b by {
    val b$delegate = remember {
      ComposeInvestigator.registerStateObject(mutableStateOf(
        value = 1
      ), "b")
    }
    get() {
      return b$delegate.getValue(null, ::b$delegate)
    }
    set(<set-?>: Int) {
      return b$delegate.setValue(null, ::b$delegate, <set-?>)
    }
  }
  var c by {
    val c$delegate = rememberSaveable {
      ComposeInvestigator.registerStateObject(mutableStateOf(
        value = 1
      ), "c")
    }
    get() {
      return c$delegate.getValue(null, ::c$delegate)
    }
    set(<set-?>: Int) {
      return c$delegate.setValue(null, ::c$delegate, <set-?>)
    }
  }
  var d = mutableStateOf(
    value = 1
  )
  var e = remember {
    mutableStateOf(
      value = 1
    )
  }
  var f = rememberSaveable {
    mutableStateOf(
      value = 1
    )
  }
  var g = MyState
  var h = remember {
    MyState
  }
  var i = rememberSaveable {
    MyState
  }
  var j = MyStateState
  var k = remember {
    MyStateState
  }
  var l = rememberSaveable {
    MyStateState
  }
}
