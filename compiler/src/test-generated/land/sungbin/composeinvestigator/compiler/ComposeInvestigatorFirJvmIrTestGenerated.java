

package land.sungbin.composeinvestigator.compiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link land.sungbin.composeinvestigator.compiler.TestGeneratorKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/src/testData/codegen")
@TestDataPath("$PROJECT_ROOT")
public class ComposeInvestigatorFirJvmIrTestGenerated extends AbstractComposeInvestigatorFirJvmIrTest {
  @Test
  public void testAllFilesPresentInCodegen() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/src/testData/codegen"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
  }

  @Nested
  @TestMetadata("compiler/src/testData/codegen/intrinsicCall")
  @TestDataPath("$PROJECT_ROOT")
  public class IntrinsicCall {
    @Test
    public void testAllFilesPresentInIntrinsicCall() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/src/testData/codegen/intrinsicCall"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("getCurrentComposableNameOnRegularFunction.kt")
    public void testGetCurrentComposableNameOnRegularFunction() {
      runTest("compiler/src/testData/codegen/intrinsicCall/getCurrentComposableNameOnRegularFunction.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/src/testData/codegen/stateInitializer")
  @TestDataPath("$PROJECT_ROOT")
  public class StateInitializer {
    @Test
    public void testAllFilesPresentInStateInitializer() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/src/testData/codegen/stateInitializer"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("delegateCustomStateCall.kt")
    public void testDelegateCustomStateCall() {
      runTest("compiler/src/testData/codegen/stateInitializer/delegateCustomStateCall.kt");
    }

    @Test
    @TestMetadata("delegateStateCall.kt")
    public void testDelegateStateCall() {
      runTest("compiler/src/testData/codegen/stateInitializer/delegateStateCall.kt");
    }

    @Test
    @TestMetadata("directCustomStateCall.kt")
    public void testDirectCustomStateCall() {
      runTest("compiler/src/testData/codegen/stateInitializer/directCustomStateCall.kt");
    }

    @Test
    @TestMetadata("directCustomStateObjectCall.kt")
    public void testDirectCustomStateObjectCall() {
      runTest("compiler/src/testData/codegen/stateInitializer/directCustomStateObjectCall.kt");
    }

    @Test
    @TestMetadata("directStateCall.kt")
    public void testDirectStateCall() {
      runTest("compiler/src/testData/codegen/stateInitializer/directStateCall.kt");
    }

    @Test
    @TestMetadata("directStateObjectCall.kt")
    public void testDirectStateObjectCall() {
      runTest("compiler/src/testData/codegen/stateInitializer/directStateObjectCall.kt");
    }

    @Test
    @TestMetadata("mutableStateOrStateObjectCall.kt")
    public void testMutableStateOrStateObjectCall() {
      runTest("compiler/src/testData/codegen/stateInitializer/mutableStateOrStateObjectCall.kt");
    }

    @Test
    @TestMetadata("nonStateOrStateObjectCall.kt")
    public void testNonStateOrStateObjectCall() {
      runTest("compiler/src/testData/codegen/stateInitializer/nonStateOrStateObjectCall.kt");
    }
  }
}
